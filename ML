{"cells":[{"source":"<a href=\"https://www.kaggle.com/code/fauziya24/titanic-machine-learning-from-disaster?scriptVersionId=185153944\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","id":"17702874","metadata":{"execution":{"iopub.execute_input":"2024-04-25T10:16:20.4223Z","iopub.status.busy":"2024-04-25T10:16:20.421126Z","iopub.status.idle":"2024-04-25T10:16:20.438474Z","shell.execute_reply":"2024-04-25T10:16:20.437134Z","shell.execute_reply.started":"2024-04-25T10:16:20.422253Z"},"papermill":{"duration":0.003181,"end_time":"2024-06-24T06:29:03.584491","exception":false,"start_time":"2024-06-24T06:29:03.58131","status":"completed"},"tags":[]},"source":["\n","1. **Data Loading and Exploration**: The code loads the train and test datasets and displays the first few rows to understand the structure of the data.\n","\n","2. **Data Preprocessing**: Missing values in the 'Age' and 'Fare' columns are filled with their respective medians. Categorical variables like 'Sex' and 'Pclass' are converted into dummy variables using one-hot encoding.\n","\n","3. **Feature Selection**: Relevant features such as 'Pclass', 'Sex', 'Age', 'SibSp', 'Parch', and 'Fare' are selected for model building.\n","\n","4. **Model Building**: Two machine learning algorithms, namely Decision Tree and Random Forest, are utilized to build predictive models. Both models are trained on the training data and their validation accuracies are evaluated.\n","\n","5. **Model Comparison**: The validation accuracies of the Decision Tree and Random Forest models are compared to determine which one performed better on the validation set.\n","\n","6. **Visualization**: Various visualizations are created to analyze the relationships between survival and different passenger attributes, including gender, age, socio-economic class, fare, family size, and embarked port. Additionally, the feature importances obtained from the Random Forest model are visualized to identify the most important features in predicting survival.\n","\n","7. **Prediction Generation**: Finally, the trained models are used to make predictions on the test set, and the predictions are saved to a CSV file for further analysis or submission.\n","\n"]},{"cell_type":"markdown","id":"e32aa501","metadata":{"papermill":{"duration":0.002349,"end_time":"2024-06-24T06:29:03.58973","exception":false,"start_time":"2024-06-24T06:29:03.587381","status":"completed"},"tags":[]},"source":["### Summary of Advanced Features:\n","\n","1. **Cross-Validation:** \n","    - Uses KFold cross-validation to split the training data into training and validation sets for better performance estimation.\n","\n","2. **Hyperparameter Tuning:** \n","    - Incorporates a more sophisticated model configuration with parameters such as `min_examples`, `categorical_algorithm`, `shrinkage`, and `split_axis`.\n","\n","3. **Ensemble Learning:** \n","    - Trains multiple models (default is 100) with different random seeds to create an ensemble model, averaging their predictions for robustness.\n","\n","4. **Organized Preprocessing:** \n","    - Ensures data preprocessing steps are clearly defined and applied consistently.\n","\n","5. **Prediction and Submission:**\n","    - Generates predictions from the ensemble model and formats them for Kaggle submission.\n","\n","By including these advanced techniques, the code aims to achieve better predictive performance while maintaining clarity and organization."]},{"cell_type":"code","execution_count":1,"id":"b3530f31","metadata":{"execution":{"iopub.execute_input":"2024-06-24T06:29:03.597124Z","iopub.status.busy":"2024-06-24T06:29:03.596669Z","iopub.status.idle":"2024-06-24T06:29:44.896877Z","shell.execute_reply":"2024-06-24T06:29:44.895448Z"},"papermill":{"duration":41.307512,"end_time":"2024-06-24T06:29:44.899819","exception":false,"start_time":"2024-06-24T06:29:03.592307","status":"completed"},"tags":[]},"outputs":[{"name":"stderr","output_type":"stream","text":["2024-06-24 06:29:06.791972: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n","2024-06-24 06:29:06.792119: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n","2024-06-24 06:29:06.951765: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"]},{"name":"stdout","output_type":"stream","text":["Found TF-DF 1.8.1\n","Input features: ['Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Cabin', 'Embarked', 'Ticket_number', 'Ticket_item']\n"]},{"name":"stderr","output_type":"stream","text":["[WARNING 24-06-24 06:29:22.2024 UTC gradient_boosted_trees.cc:1886] \"goss_alpha\" set but \"sampling_method\" not equal to \"GOSS\".\n","[WARNING 24-06-24 06:29:22.2033 UTC gradient_boosted_trees.cc:1897] \"goss_beta\" set but \"sampling_method\" not equal to \"GOSS\".\n","[WARNING 24-06-24 06:29:22.2033 UTC gradient_boosted_trees.cc:1911] \"selective_gradient_boosting_ratio\" set but \"sampling_method\" not equal to \"SELGB\".\n","[INFO 24-06-24 06:29:30.1470 UTC kernel.cc:1233] Loading model from path /tmp/tmpb6vbtla9/model/ with prefix f5d42564522f4942\n","[INFO 24-06-24 06:29:30.1596 UTC decision_forest.cc:660] Model loaded with 42 root(s), 2172 node(s), and 10 input feature(s).\n","[INFO 24-06-24 06:29:30.1596 UTC abstract_model.cc:1344] Engine \"GradientBoostedTreesGeneric\" built\n","[INFO 24-06-24 06:29:30.1597 UTC kernel.cc:1061] Use fast generic engine\n"]},{"name":"stdout","output_type":"stream","text":["Evaluation result for fold 1: Evaluation(num_examples=None, accuracy=0.8536585569381714, loss=0.7086496949195862, rmse=None, ndcg=None, aucs=None, auuc=None, qini=None)\n"]},{"name":"stderr","output_type":"stream","text":["[WARNING 24-06-24 06:29:38.4815 UTC gradient_boosted_trees.cc:1886] \"goss_alpha\" set but \"sampling_method\" not equal to \"GOSS\".\n","[WARNING 24-06-24 06:29:38.4815 UTC gradient_boosted_trees.cc:1897] \"goss_beta\" set but \"sampling_method\" not equal to \"GOSS\".\n","[WARNING 24-06-24 06:29:38.4815 UTC gradient_boosted_trees.cc:1911] \"selective_gradient_boosting_ratio\" set but \"sampling_method\" not equal to \"SELGB\".\n","[INFO 24-06-24 06:29:39.4178 UTC kernel.cc:1233] Loading model from path /tmp/tmpbkqzb_4g/model/ with prefix 8074e4f47cf74c2b\n","[INFO 24-06-24 06:29:39.4302 UTC decision_forest.cc:660] Model loaded with 56 root(s), 2774 node(s), and 10 input feature(s).\n","[INFO 24-06-24 06:29:39.4303 UTC kernel.cc:1061] Use fast generic engine\n"]},{"name":"stdout","output_type":"stream","text":["Evaluation result for fold 2: Evaluation(num_examples=None, accuracy=0.8674699068069458, loss=0.6576435565948486, rmse=None, ndcg=None, aucs=None, auuc=None, qini=None)\n"]},{"name":"stderr","output_type":"stream","text":["[WARNING 24-06-24 06:29:39.9573 UTC gradient_boosted_trees.cc:1886] \"goss_alpha\" set but \"sampling_method\" not equal to \"GOSS\".\n","[WARNING 24-06-24 06:29:39.9573 UTC gradient_boosted_trees.cc:1897] \"goss_beta\" set but \"sampling_method\" not equal to \"GOSS\".\n","[WARNING 24-06-24 06:29:39.9573 UTC gradient_boosted_trees.cc:1911] \"selective_gradient_boosting_ratio\" set but \"sampling_method\" not equal to \"SELGB\".\n","[INFO 24-06-24 06:29:40.7616 UTC kernel.cc:1233] Loading model from path /tmp/tmppf75man6/model/ with prefix fefa8141ae9b49bd\n","[INFO 24-06-24 06:29:40.7698 UTC decision_forest.cc:660] Model loaded with 34 root(s), 1796 node(s), and 10 input feature(s).\n","[INFO 24-06-24 06:29:40.7698 UTC abstract_model.cc:1344] Engine \"GradientBoostedTreesGeneric\" built\n","[INFO 24-06-24 06:29:40.7698 UTC kernel.cc:1061] Use fast generic engine\n"]},{"name":"stdout","output_type":"stream","text":["Evaluation result for fold 3: Evaluation(num_examples=None, accuracy=0.7469879388809204, loss=0.9846442937850952, rmse=None, ndcg=None, aucs=None, auuc=None, qini=None)\n"]},{"name":"stderr","output_type":"stream","text":["[WARNING 24-06-24 06:29:41.2945 UTC gradient_boosted_trees.cc:1886] \"goss_alpha\" set but \"sampling_method\" not equal to \"GOSS\".\n","[WARNING 24-06-24 06:29:41.2945 UTC gradient_boosted_trees.cc:1897] \"goss_beta\" set but \"sampling_method\" not equal to \"GOSS\".\n","[WARNING 24-06-24 06:29:41.2945 UTC gradient_boosted_trees.cc:1911] \"selective_gradient_boosting_ratio\" set but \"sampling_method\" not equal to \"SELGB\".\n","[INFO 24-06-24 06:29:42.4768 UTC kernel.cc:1233] Loading model from path /tmp/tmpa5o0zvaj/model/ with prefix 08fc9c69c9754885\n","[INFO 24-06-24 06:29:42.4979 UTC decision_forest.cc:660] Model loaded with 101 root(s), 4691 node(s), and 10 input feature(s).\n","[INFO 24-06-24 06:29:42.4979 UTC kernel.cc:1061] Use fast generic engine\n"]},{"name":"stdout","output_type":"stream","text":["Evaluation result for fold 4: Evaluation(num_examples=None, accuracy=0.8795180916786194, loss=0.704037606716156, rmse=None, ndcg=None, aucs=None, auuc=None, qini=None)\n"]},{"name":"stderr","output_type":"stream","text":["[WARNING 24-06-24 06:29:43.0371 UTC gradient_boosted_trees.cc:1886] \"goss_alpha\" set but \"sampling_method\" not equal to \"GOSS\".\n","[WARNING 24-06-24 06:29:43.0372 UTC gradient_boosted_trees.cc:1897] \"goss_beta\" set but \"sampling_method\" not equal to \"GOSS\".\n","[WARNING 24-06-24 06:29:43.0372 UTC gradient_boosted_trees.cc:1911] \"selective_gradient_boosting_ratio\" set but \"sampling_method\" not equal to \"SELGB\".\n","[INFO 24-06-24 06:29:43.9112 UTC kernel.cc:1233] Loading model from path /tmp/tmp11ao92p_/model/ with prefix 3ccfacfb288e411d\n","[INFO 24-06-24 06:29:43.9219 UTC decision_forest.cc:660] Model loaded with 48 root(s), 2388 node(s), and 10 input feature(s).\n","[INFO 24-06-24 06:29:43.9220 UTC kernel.cc:1061] Use fast generic engine\n"]},{"name":"stdout","output_type":"stream","text":["Evaluation result for fold 5: Evaluation(num_examples=None, accuracy=0.891566276550293, loss=0.7004464864730835, rmse=None, ndcg=None, aucs=None, auuc=None, qini=None)\n","1/1 [==============================] - 0s 162ms/step\n","Submission exported to /kaggle/working/submission.csv\n"]},{"data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAA90AAAJOCAYAAACqS2TfAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAABPTklEQVR4nO3de1yUZf7/8fdwGkDFEwjiAdBM0zykKVlauaGkRmrlemhTsbRMUmPb8oyaZd+2zDLLfq2nNU03U2uzNCLRNQ+Uh8w8bJ7WPOFpFURFhPv3hw9mnWZQUS6Hsdfz8ZhHzTXXfc3nvueaqTf3yWZZliUAAAAAAFDifDxdAAAAAAAANytCNwAAAAAAhhC6AQAAAAAwhNANAAAAAIAhhG4AAAAAAAwhdAMAAAAAYAihGwAAAAAAQwjdAAAAAAAYQugGAAAAAMAQQjcA4Hfjl19+Ubt27VS+fHnZbDYtXrzY0yWVuD59+qhs2bKeLuOmZLPZNGbMGMfzmTNnymazae/evVdcNjo6Wn369CnRevr06aPo6OgSHfNG27t3r2w2m2bOnHnFvjfD+gL4fSJ0A4CXee+992Sz2RQbG+vpUrxO79699dNPP+mVV17R7Nmzdeeddxp7r8IwUdTjtddeM/beJWHRokVq3769QkNDFRAQoMjISP3xj3/Ut99+6+nSrmjQoEGy2WzauXNnkX1GjBghm82mzZs338DKiu/gwYMaM2aMNm3a5OlSHC43t++66y5PlwcApY6fpwsAABTPnDlzFB0drYyMDO3cuVO33HKLp0vyCmfPntWaNWs0YsQIJSUl3bD37dGjhzp06ODSfscdd9ywGorDsiz17dtXM2fO1B133KHk5GRFRETo0KFDWrRokR544AF99913uvvuuz1dapEef/xxTZ48WXPnztXo0aPd9vn444/VsGFDNWrU6Jrf54knnlD37t1lt9uveYwrOXjwoMaOHavo6Gg1adLE6bUPP/xQBQUFxt77StzN7bCwMA9VAwClF6EbALzInj17tHr1ai1cuFBPP/205syZo5SUFE+X5VZOTo7KlCnj6TIcjh49KkmqUKFCiY15NevYtGlT/elPfyqx9zTtzTff1MyZMzVkyBBNnDhRNpvN8dqIESM0e/Zs+fkV/b8PpeFzj42N1S233KKPP/7Ybehes2aN9uzZc91HG/j6+srX1/e6xrge/v7+HntvyfvmNgB4CoeXA4AXmTNnjipWrKiOHTvqscce05w5c9z2O3nypJ5//nlFR0fLbrerevXq6tWrl44dO+boc+7cOY0ZM0a33nqrAgMDVbVqVT3yyCPatWuXJCk9PV02m03p6elOY7s7B7PwPOJdu3apQ4cOKleunB5//HFJ0r/+9S917dpVNWvWlN1uV40aNfT888/r7NmzLnVv375df/zjHxUWFqagoCDVrVtXI0aMkCQtX75cNptNixYtcllu7ty5stlsWrNmjdvtMWbMGEVFRUmS/vKXv8hmszmdG7px40a1b99eISEhKlu2rB544AGtXbvWaYzC83dXrFihZ599VlWqVFH16tXdvl9xffbZZ+rYsaMiIyNlt9tVu3Ztvfzyy8rPz3fpu27dOnXo0EEVK1ZUmTJl1KhRI7399tsu/Q4cOKDOnTurbNmyCgsL0wsvvOB2vEudPXtWEyZMUL169fTGG284Be5CTzzxhFq0aCHpytvkvffeU4MGDWS32xUZGamBAwfq5MmTTuP98ssvevTRRxUREaHAwEBVr15d3bt316lTpxx9UlNT1apVK1WoUEFly5ZV3bp1NXz48Muuy+OPP67t27drw4YNLq8VzpcePXro/PnzGj16tJo1a6by5curTJkyat26tZYvX37Z8S9d/0vP6bYsS+PHj1f16tUVHBysNm3a6Oeff3ZZ9sSJE3rhhRfUsGFDlS1bViEhIWrfvr1+/PFHR5/09HQ1b95ckpSYmOg4hLvwu+fuHOecnBz9+c9/Vo0aNWS321W3bl298cYbsizLqZ/NZlNSUpIWL16s22+/XXa7XQ0aNNDSpUuvuN5Xa/fu3eratasqVaqk4OBg3XXXXVqyZMlVLVtYV2BgoG6//Xa333sA8Bbs6QYALzJnzhw98sgjCggIUI8ePfT+++/r+++/d/yPuSSdPn1arVu31rZt29S3b181bdpUx44d0+eff679+/crNDRU+fn5euihh5SWlqbu3btr8ODBys7OVmpqqrZs2aLatWsXu7YLFy4oPj5erVq10htvvKHg4GBJ0ieffKIzZ85owIABqly5sjIyMjR58mTt379fn3zyiWP5zZs3q3Xr1vL391f//v0VHR2tXbt26Z///KdeeeUV3X///apRo4bmzJmjLl26uGyX2rVrq2XLlm5re+SRR1ShQgU9//zzjkNiCy829vPPP6t169YKCQnRiy++KH9/f33wwQe6//77tWLFCpdz55999lmFhYVp9OjRysnJueJ2OXPmjNMfOwpVqFDBscd45syZKlu2rJKTk1W2bFl9++23Gj16tLKysvTXv/7VsUxqaqoeeughVa1aVYMHD1ZERIS2bdumL774QoMHD3b0y8/PV3x8vGJjY/XGG2/om2++0ZtvvqnatWtrwIABRda6atUqnThxQkOGDCnWHlx322TMmDEaO3as4uLiNGDAAO3YscMxX7/77jv5+/vr/Pnzio+PV25urp577jlFRETowIED+uKLL3Ty5EmVL19eP//8sx566CE1atRI48aNk91u186dO/Xdd99dtqbHH39cY8eO1dy5c9W0aVOnbfOPf/xDrVu3Vs2aNXXs2DH97W9/U48ePdSvXz9lZ2dr2rRpio+PV0ZGhssh3VcyevRojR8/Xh06dFCHDh20YcMGtWvXTufPn3fqt3v3bi1evFhdu3ZVTEyMMjMz9cEHH+i+++7T1q1bFRkZqdtuu03jxo3T6NGj1b9/f7Vu3VqSijy037IsPfzww1q+fLmefPJJNWnSRMuWLdNf/vIXHThwQG+99ZZT/1WrVmnhwoV69tlnVa5cOb3zzjt69NFHtW/fPlWuXPmK6+pubpcvX17+/v7KzMzU3XffrTNnzmjQoEGqXLmyZs2apYcfflgLFixw+Q5f6uuvv9ajjz6q+vXra8KECTp+/LgSExNL7I9cAHDDWQAAr/DDDz9YkqzU1FTLsiyroKDAql69ujV48GCnfqNHj7YkWQsXLnQZo6CgwLIsy5o+fbolyZo4cWKRfZYvX25JspYvX+70+p49eyxJ1owZMxxtvXv3tiRZQ4cOdRnvzJkzLm0TJkywbDab9Z///MfRdu+991rlypVzaru0HsuyrGHDhll2u906efKko+3IkSOWn5+flZKS4vI+7ur+61//6tTeuXNnKyAgwNq1a5ej7eDBg1a5cuWse++919E2Y8YMS5LVqlUr68KFC5d9r0vfr6jHmjVrHH3dbaOnn37aCg4Ots6dO2dZlmVduHDBiomJsaKioqz//ve/Tn0v3UaFn8W4ceOc+txxxx1Ws2bNLlvz22+/bUmyFi1adMX1s6yit8mRI0esgIAAq127dlZ+fr6j/d1337UkWdOnT7csy7I2btxoSbI++eSTIt/jrbfesiRZR48evaqaLtW8eXOrevXqTjUsXbrUkmR98MEHlmVd3K65ublOy/33v/+1wsPDrb59+zq1S3KaZ4Xrv2fPHqf17tixo9NnMnz4cEuS1bt3b0fbuXPnnOqyrItzxm63O31233//vcv3rVDv3r2tqKgox/PFixdbkqzx48c79Xvssccsm81m7dy502ldAgICnNp+/PFHS5I1efJkl/f6bZ1FzevC34shQ4ZYkqx//etfjuWys7OtmJgYKzo62rHu7n5PmjRpYlWtWtXpe/71119bkpzWFwC8BYeXA4CXmDNnjsLDw9WmTRtJFw8P7datm+bNm+d02PCnn36qxo0bu92TVHi48KeffqrQ0FA999xzRfa5Fu72ogYFBTn+PScnR8eOHdPdd98ty7K0ceNGSRfPt165cqX69u2rmjVrFllPr169lJubqwULFjja5s+frwsXLlzTuaX5+fn6+uuv1blzZ9WqVcvRXrVqVfXs2VOrVq1SVlaW0zL9+vUr1l7g/v37KzU11eVRv359R59Lt1F2draOHTum1q1b68yZM9q+fbuki4fA79mzR0OGDHE5L93dZ/bMM884PW/durV279592VoL17VcuXJXvX6S6zb55ptvdP78eQ0ZMkQ+Pj5O/UJCQhyHGJcvX16StGzZMp05c8bt2IXr+tlnnxX7omF/+tOftH//fq1cudLRNnfuXAUEBKhr166SLp6XHRAQIEkqKCjQiRMndOHCBd15551uD02/nML1fu6555w+kyFDhrj0tdvtjm2Tn5+v48ePOw6dL+77Fvryyy/l6+urQYMGObX/+c9/lmVZ+uqrr5za4+LinI5qadSokUJCQq44Twq5m9uNGzd21NKiRQu1atXK0b9s2bLq37+/9u7dq61bt7od89ChQ9q0aZN69+7tmB+S1LZtW6fvDAB4E0I3AHiB/Px8zZs3T23atNGePXu0c+dO7dy5U7GxscrMzFRaWpqj765du3T77bdfdrxdu3apbt26l70gVnH5+fm5Pfxz37596tOnjypVquQ4v/i+++6TJMd5u4X/k3+luuvVq6fmzZs7ncs+Z84c3XXXXdd0FfejR4/qzJkzqlu3rstrt912mwoKCvTrr786tcfExBTrPerUqaO4uDiXR0hIiKPPzz//rC5duqh8+fIKCQlRWFiY448Ihduo8Fz7K20jSQoMDHS5inTFihX13//+97LLFdaUnZ199Sso123yn//8R5JctmtAQIBq1arleD0mJkbJycn629/+ptDQUMXHx2vKlClO53N369ZN99xzj5566imFh4ere/fu+sc//uEUwA8fPuz0KLxeQPfu3eXr66u5c+dKungdg8JboVWsWNGx/KxZs9SoUSMFBgaqcuXKCgsL05IlS5zquBqF61WnTh2n9rCwMKf3ky4G/Lfeekt16tSR3W5XaGiowsLCtHnz5mK/76XvHxkZ6fJHk9tuu82pvkK//QOXdHXzpJC7uV24nv/5z3+K/F65q+XSdSgc+7fcjQcA3oDQDQBe4Ntvv9WhQ4c0b9481alTx/H44x//KElFXlDtehS1x7uoi3Fduufu0r5t27bVkiVL9NJLL2nx4sVKTU11XAjqWm531KtXL61YsUL79+/Xrl27tHbt2ht6BeVL90qXhJMnT+q+++7Tjz/+qHHjxumf//ynUlNT9X//93+Srm0bXesVtevVqydJ+umnn4q13PVskzfffFObN2/W8OHDdfbsWQ0aNEgNGjTQ/v37HWOvXLlS33zzjZ544glt3rxZ3bp1U9u2bR1zsWrVqk6P+fPnS5KqVKmitm3b6tNPP1VeXp7++c9/Kjs723GRP0n66KOP1KdPH9WuXVvTpk3T0qVLlZqaqj/84Q9Gb8f16quvKjk5Wffee68++ugjLVu2TKmpqWrQoMENuw1YUfPE+s1F1wAA14cLqQGAF5gzZ46qVKmiKVOmuLy2cOFCLVq0SFOnTlVQUJBq166tLVu2XHa82rVra926dcrLyyvytkOFe6x+e7XpovZQufPTTz/p3//+t2bNmqVevXo52lNTU536FR7afaW6pYt7L5OTk/Xxxx/r7Nmz8vf3V7du3a66pkuFhYUpODhYO3bscHlt+/bt8vHxUY0aNa5p7KuVnp6u48ePa+HChbr33nsd7Xv27HHqV3gY8JYtWxQXF2ekllatWqlixYr6+OOPNXz48GsO74VXit+xY4fTYfvnz5/Xnj17XOpv2LChGjZsqJEjR2r16tW65557NHXqVI0fP16S5OPjowceeEAPPPCAJk6cqFdffVUjRozQ8uXLFRcX5zKfGjRo4Pj3xx9/XEuXLtVXX32luXPnKiQkRAkJCY7XFyxYoFq1amnhwoVOf2i6llvxFa73L7/84rTeR48eddl7vGDBArVp00bTpk1zaj958qRCQ0Mdz4tzukdUVJS++eYbZWdnO+3tLjxFobC+GyEqKqrI79Xlarl0G/6Wu/EAwBuwpxsASrmzZ89q4cKFeuihh/TYY4+5PJKSkpSdna3PP/9ckvToo4/qxx9/dHuLncI9WI8++qiOHTumd999t8g+UVFR8vX1dTofVrp4G6irVRjaLt1zZlmWyy2uwsLCdO+992r69Onat2+f23oKhYaGqn379vroo480Z84cPfjgg04hpTh8fX3Vrl07ffbZZ063fcrMzNTcuXPVqlUrp8PATXC3jc6fP++ynZs2baqYmBhNmjTJ5Q8hJbVnMjg4WC+99JK2bduml156ye24H330kTIyMi47TlxcnAICAvTOO+84jTFt2jSdOnVKHTt2lHTxHPILFy44LduwYUP5+PgoNzdX0sVba/1W4RXFC/v89hDnqlWrOvp27txZwcHBeu+99/TVV1/pkUceUWBgoON1d9t/3bp1Rd5+7krr7e/vr8mTJzuNN2nSJJe+vr6+Ltv3k08+0YEDB5zaCu95/tvP3J0OHTooPz/f5Xv91ltvyWazqX379le5JtevQ4cOysjIcNqOOTk5+n//7/8pOjq6yPOzq1atqiZNmmjWrFkut40r6jxwACjt2NMNAKXc559/ruzsbD388MNuX7/rrrsUFhamOXPmqFu3bvrLX/6iBQsWqGvXrurbt6+aNWumEydO6PPPP9fUqVPVuHFj9erVS3//+9+VnJysjIwMtW7dWjk5Ofrmm2/07LPPqlOnTipfvry6du2qyZMny2azqXbt2vriiy905MiRq669Xr16ql27tl544QUdOHBAISEh+vTTT92eM/rOO++oVatWatq0qfr376+YmBjt3btXS5Ys0aZNm5z69urVS4899pgk6eWXX776jenG+PHjHfeBfvbZZ+Xn56cPPvhAubm5ev31169rbEnasGGDPvroI5f2wluc3X333apYsaJ69+6tQYMGyWazafbs2S6BzMfHR++//74SEhLUpEkTJSYmqmrVqtq+fbt+/vlnLVu27LprlS7ex/znn3/Wm2++qeXLl+uxxx5TRESEDh8+rMWLFysjI0OrV6++7BhhYWEaNmyYxo4dqwcffFAPP/ywduzYoffee0/Nmzd3nA7w7bffKikpSV27dtWtt96qCxcuaPbs2fL19dWjjz4qSRo3bpxWrlypjh07KioqSkeOHNF7772n6tWrO12kqyhly5ZV586dHed1X3pouSQ99NBDWrhwobp06aKOHTtqz549mjp1qurXr6/Tp08Xa9sV3g99woQJeuihh9ShQwdt3LhRX331lcsfhh566CGNGzdOiYmJuvvuu/XTTz9pzpw5TnvIpYvzpEKFCpo6darKlSunMmXKKDY21u21BRISEtSmTRuNGDFCe/fuVePGjfX111/rs88+05AhQ67pVoDXaujQofr444/Vvn17DRo0SJUqVdKsWbO0Z88effrppy6nolxqwoQJ6tixo1q1aqW+ffvqxIkTmjx5sho0aFDszwQASoUbf8F0AEBxJCQkWIGBgVZOTk6Rffr06WP5+/tbx44dsyzLso4fP24lJSVZ1apVswICAqzq1atbvXv3drxuWRdvUzVixAgrJibG8vf3tyIiIqzHHnvM6dZZR48etR599FErODjYqlixovX0009bW7ZscXvLsDJlyritbevWrVZcXJxVtmxZKzQ01OrXr5/j1kS/vQ3Sli1brC5dulgVKlSwAgMDrbp161qjRo1yGTM3N9eqWLGiVb58eevs2bNXsxmLvGWYZVnWhg0brPj4eKts2bJWcHCw1aZNG2v16tVOfQpvD/X9998X6/2Kelx6+6jvvvvOuuuuu6ygoCArMjLSevHFF61ly5a5vWXbqlWrrLZt21rlypWzypQpYzVq1MjpFk9FfRYpKSlWcf6zv2DBAqtdu3ZWpUqVLD8/P6tq1apWt27drPT09KveJu+++65Vr149y9/f3woPD7cGDBjgdLuz3bt3W3379rVq165tBQYGWpUqVbLatGljffPNN44+aWlpVqdOnazIyEgrICDAioyMtHr06GH9+9//vup1WbJkiSXJqlq1qsttugoKCqxXX33VioqKsux2u3XHHXdYX3zxhcvtuCzryrcMsyzLys/Pt8aOHWtVrVrVCgoKsu6//35ry5YtVlRUlMstw/785z87+t1zzz3WmjVrrPvuu8+67777nN73s88+s+rXr2/5+fk5fW/c1ZidnW09//zzVmRkpOXv72/VqVPH+utf/+p0C7PCdRk4cKDLtvptne5c7rt0qV27dlmPPfaY4/vcokUL64svvnA71m9/Cz799FPrtttus+x2u1W/fn1r4cKFbtcX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Q9UAAHBzYk83AAC/U3a7XREREU4PX19frVixQi1atJDdblfVqlU1dOhQXbhwochxjhw5ooSEBAUFBSkmJkZz5sy5gWsBAEDpxp5uAADgcODAAXXo0EF9+vTR3//+d23fvl39+vVTYGCgxowZ43aZPn366ODBg1q+fLn8/f01aNAgHTly5MYWDgBAKUXoBgDgd+qLL75Q2bJlHc/bt2+vW2+9VTVq1NC7774rm82mevXq6eDBg3rppZc0evRo+fg4HyT373//W1999ZUyMjLUvHlzSdK0adN022233dB1AQCgtCJ0AwDwO9WmTRu9//77judlypTRwIED1bJlS9lsNkf7Pffco9OnT2v//v2qWbOm0xjbtm2Tn5+fmjVr5mirV6+eKlSoYLx+AAC8AaEbAIDfqTJlyuiWW27xdBkAANzUuJAaAABwuO2227RmzRpZluVo++6771SuXDlVr17dpX+9evV04cIFrV+/3tG2Y8cOnTx58kaUCwBAqUfoBgAADs8++6x+/fVXPffcc9q+fbs+++wzpaSkKDk52eV8bkmqW7euHnzwQT399NNat26d1q9fr6eeekpBQUEeqB4AgNKH0A0AAByqVaumL7/8UhkZGWrcuLGeeeYZPfnkkxo5cmSRy8yYMUORkZG677779Mgjj6h///6qUqXKDawaAIDSy2ZdevwYAAAAAAAoMezpBgAAAADAEEI3AAAAAACGELoBAAAAADCE0A0AAAAAgCGEbgAAAAAADCF0AwAAAABgCKEbAAAAAABDCN0AAAAAABhC6AYAAAAAwBBCNwAAAAAAhhC6AQAAAAAwhNANAAAAAIAh/x9V/6vY5kORIgAAAABJRU5ErkJggg==","text/plain":["<Figure size 1000x600 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["import numpy as np\n","import pandas as pd\n","import tensorflow as tf\n","import tensorflow_decision_forests as tfdf\n","from sklearn.model_selection import KFold\n","import matplotlib.pyplot as plt\n","\n","print(f\"Found TF-DF {tfdf.__version__}\")\n","\n","# Load datasets\n","train_df = pd.read_csv(\"/kaggle/input/titanic/train.csv\")\n","serving_df = pd.read_csv(\"/kaggle/input/titanic/test.csv\")\n","\n","# Preprocess the data\n","def preprocess(df):\n","    df = df.copy()\n","    \n","    def normalize_name(x):\n","        return \" \".join([v.strip(\",()[].\\\"'\") for v in x.split(\" \")])\n","    \n","    def ticket_number(x):\n","        return x.split(\" \")[-1]\n","        \n","    def ticket_item(x):\n","        items = x.split(\" \")\n","        if len(items) == 1:\n","            return \"NONE\"\n","        return \"_\".join(items[0:-1])\n","    \n","    df[\"Name\"] = df[\"Name\"].apply(normalize_name)\n","    df[\"Ticket_number\"] = df[\"Ticket\"].apply(ticket_number)\n","    df[\"Ticket_item\"] = df[\"Ticket\"].apply(ticket_item)\n","    return df\n","\n","# Apply preprocessing to both training and serving datasets\n","preprocessed_train_df = preprocess(train_df)\n","preprocessed_serving_df = preprocess(serving_df)\n","\n","# Define input features, excluding columns that are not useful for the model\n","input_features = list(preprocessed_train_df.columns)\n","input_features.remove(\"Ticket\")\n","input_features.remove(\"PassengerId\")\n","input_features.remove(\"Survived\")\n","\n","print(f\"Input features: {input_features}\")\n","\n","# Tokenize names to prepare text data for the model\n","def tokenize_names(features, labels=None):\n","    features[\"Name\"] = tf.strings.split(features[\"Name\"])\n","    return features, labels\n","\n","# Convert pandas DataFrames to TensorFlow datasets and apply tokenization\n","train_ds = tfdf.keras.pd_dataframe_to_tf_dataset(preprocessed_train_df, label=\"Survived\").map(tokenize_names)\n","serving_ds = tfdf.keras.pd_dataframe_to_tf_dataset(preprocessed_serving_df).map(tokenize_names)\n","\n","def train_and_evaluate_model(train_df, input_features, random_seed):\n","    kfold = KFold(n_splits=5, shuffle=True, random_state=random_seed)\n","    accuracy_list = []\n","\n","    for i, (train_index, val_index) in enumerate(kfold.split(train_df), 1):\n","        train_fold = train_df.iloc[train_index]\n","        val_fold = train_df.iloc[val_index]\n","\n","        train_fold_ds = tfdf.keras.pd_dataframe_to_tf_dataset(train_fold, label=\"Survived\").map(tokenize_names)\n","        val_fold_ds = tfdf.keras.pd_dataframe_to_tf_dataset(val_fold, label=\"Survived\").map(tokenize_names)\n","\n","        model = tfdf.keras.GradientBoostedTreesModel(\n","            verbose=0,\n","            features=[tfdf.keras.FeatureUsage(name=n) for n in input_features],\n","            exclude_non_specified_features=True,\n","            random_seed=random_seed,\n","            min_examples=2,\n","            categorical_algorithm=\"RANDOM\",\n","            shrinkage=0.05,\n","            split_axis=\"SPARSE_OBLIQUE\",\n","            sparse_oblique_normalization=\"MIN_MAX\",\n","            sparse_oblique_num_projections_exponent=2.0,\n","            num_trees=2000,\n","        )\n","\n","        model.fit(train_fold_ds)\n","\n","        # Evaluate the model on the validation fold\n","        inspector = model.make_inspector()\n","        val_evaluation = inspector.evaluation()\n","\n","        # Debugging: Print the evaluation\n","        print(f\"Evaluation result for fold {i}: {val_evaluation}\")\n","\n","        if val_evaluation is not None and hasattr(val_evaluation, 'accuracy'):\n","            accuracy_list.append(val_evaluation.accuracy)\n","        else:\n","            print(f\"Warning: Evaluation result is None or does not contain 'accuracy' for fold {i}. Skipping this fold.\")\n","\n","    avg_accuracy = np.mean(accuracy_list)\n","    return avg_accuracy, model, accuracy_list\n","\n","# Train the ensemble model and make predictions\n","def train_ensemble_model(train_df, input_features):\n","    random_seed = 42\n","    avg_accuracy, model, accuracy_list = train_and_evaluate_model(train_df, input_features, random_seed)\n","\n","    # Generate predictions on the serving dataset\n","    predictions = model.predict(serving_ds)\n","    return predictions, accuracy_list\n","\n","# Convert model predictions to the Kaggle submission format\n","def prediction_to_kaggle_format(predictions, threshold=0.5):\n","    # Ensure predictions are a 1-dimensional array\n","    predicted_labels = (predictions >= threshold).astype(int).flatten()\n","    return pd.DataFrame({\n","        \"PassengerId\": serving_df[\"PassengerId\"],\n","        \"Survived\": predicted_labels\n","    })\n","\n","# Save the predictions as a CSV file for submission\n","def make_submission(kaggle_predictions):\n","    path = \"/kaggle/working/submission.csv\"\n","    kaggle_predictions.to_csv(path, index=False)\n","    print(f\"Submission exported to {path}\")\n","\n","# Train the ensemble model and make predictions\n","predictions, accuracy_list = train_ensemble_model(preprocessed_train_df, input_features)\n","kaggle_predictions = prediction_to_kaggle_format(predictions)\n","make_submission(kaggle_predictions)\n","\n","# Plot the accuracy for each fold\n","plt.figure(figsize=(10, 6))\n","plt.bar(range(1, 6), accuracy_list, align='center')\n","plt.xlabel(\"Fold\")\n","plt.ylabel(\"Accuracy\")\n","plt.title(\"Accuracy for Each Cross-Validation Fold\")\n","plt.ylim(0.7, 1.0)  # Adjust the y-axis limits if needed\n","plt.xticks(range(1, 6))\n","plt.grid(True)\n","plt.tight_layout()\n","plt.show()\n"]},{"cell_type":"code","execution_count":null,"id":"a568e7a6","metadata":{"papermill":{"duration":0.00553,"end_time":"2024-06-24T06:29:44.910953","exception":false,"start_time":"2024-06-24T06:29:44.905423","status":"completed"},"tags":[]},"outputs":[],"source":[]}],"metadata":{"kaggle":{"accelerator":"none","dataSources":[{"databundleVersionId":26502,"sourceId":3136,"sourceType":"competition"}],"dockerImageVersionId":30698,"isGpuEnabled":false,"isInternetEnabled":true,"language":"python","sourceType":"notebook"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.13"},"papermill":{"default_parameters":{},"duration":47.231788,"end_time":"2024-06-24T06:29:47.634616","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2024-06-24T06:29:00.402828","version":"2.5.0"}},"nbformat":4,"nbformat_minor":5}